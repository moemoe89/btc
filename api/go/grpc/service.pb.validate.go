// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/service.proto

package grpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() < 1 {
		return CreateTransactionRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetDatetime() == nil {
		return CreateTransactionRequestValidationError{
			field:  "Datetime",
			reason: "value is required",
		}
	}

	if val := m.GetAmount(); val > -0.1 && val < 0.1 {
		return CreateTransactionRequestValidationError{
			field:  "Amount",
			reason: "value must be outside range (-0.1, 0.1)",
		}
	}

	return nil
}

// CreateTransactionRequestValidationError is the validation error returned by
// CreateTransactionRequest.Validate if the designated constraints aren't met.
type CreateTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransactionRequestValidationError) ErrorName() string {
	return "CreateTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransactionRequestValidationError{}

// Validate checks the field values on ListTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() < 1 {
		return ListTransactionRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetStartDatetime() == nil {
		return ListTransactionRequestValidationError{
			field:  "StartDatetime",
			reason: "value is required",
		}
	}

	if m.GetEndDatetime() == nil {
		return ListTransactionRequestValidationError{
			field:  "EndDatetime",
			reason: "value is required",
		}
	}

	return nil
}

// ListTransactionRequestValidationError is the validation error returned by
// ListTransactionRequest.Validate if the designated constraints aren't met.
type ListTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransactionRequestValidationError) ErrorName() string {
	return "ListTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransactionRequestValidationError{}

// Validate checks the field values on ListTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTransactionResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTransactionResponseValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListTransactionResponseValidationError is the validation error returned by
// ListTransactionResponse.Validate if the designated constraints aren't met.
type ListTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransactionResponseValidationError) ErrorName() string {
	return "ListTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransactionResponseValidationError{}

// Validate checks the field values on GetUserBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserBalanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() < 1 {
		return GetUserBalanceRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// GetUserBalanceRequestValidationError is the validation error returned by
// GetUserBalanceRequest.Validate if the designated constraints aren't met.
type GetUserBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBalanceRequestValidationError) ErrorName() string {
	return "GetUserBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBalanceRequestValidationError{}
