// Code generated by MockGen. DO NOT EDIT.
// Source: btc.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "github.com/moemoe89/btc/api/go/grpc"
)

// GoMockBTCRepo is a mock of BTCRepo interface.
type GoMockBTCRepo struct {
	ctrl     *gomock.Controller
	recorder *GoMockBTCRepoMockRecorder
}

// GoMockBTCRepoMockRecorder is the mock recorder for GoMockBTCRepo.
type GoMockBTCRepoMockRecorder struct {
	mock *GoMockBTCRepo
}

// NewGoMockBTCRepo creates a new mock instance.
func NewGoMockBTCRepo(ctrl *gomock.Controller) *GoMockBTCRepo {
	mock := &GoMockBTCRepo{ctrl: ctrl}
	mock.recorder = &GoMockBTCRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GoMockBTCRepo) EXPECT() *GoMockBTCRepoMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *GoMockBTCRepo) CreateTransaction(ctx context.Context, params *CreateTransactionParams) (*grpc.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, params)
	ret0, _ := ret[0].(*grpc.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *GoMockBTCRepoMockRecorder) CreateTransaction(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*GoMockBTCRepo)(nil).CreateTransaction), ctx, params)
}

// GetUserBalance mocks base method.
func (m *GoMockBTCRepo) GetUserBalance(ctx context.Context, userID int64) (*grpc.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(*grpc.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *GoMockBTCRepoMockRecorder) GetUserBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*GoMockBTCRepo)(nil).GetUserBalance), ctx, userID)
}

// ListTransaction mocks base method.
func (m *GoMockBTCRepo) ListTransaction(ctx context.Context, userID int64) ([]*grpc.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransaction", ctx, userID)
	ret0, _ := ret[0].([]*grpc.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransaction indicates an expected call of ListTransaction.
func (mr *GoMockBTCRepoMockRecorder) ListTransaction(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransaction", reflect.TypeOf((*GoMockBTCRepo)(nil).ListTransaction), ctx, userID)
}
